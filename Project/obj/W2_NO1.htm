<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\W2_NO1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\W2_NO1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun Oct 09 10:50:41 2022
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TIM4_IRQHandler &rArr; DHT20_update &rArr; AHT20_Read_CTdata_crc &rArr; AHT20_SendAC &rArr; AHT20_WR_Byte &rArr; SDA_Output &rArr; GPIO_Out_PP &rArr; GPIO_Init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from main_timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from main_timer.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from tuya_wifi_usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from sensor_jw01.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from usart.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3f]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[fb]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[fc]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[40]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[fd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[44]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[fe]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[100]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[101]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[102]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[103]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[104]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[105]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[106]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[107]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[108]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[109]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[110]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[111]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[112]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[49]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[113]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[114]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[115]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[116]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[117]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[118]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[119]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[11a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[3e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[11b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[41]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[43]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[11c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[45]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; wifi_uart_service &rArr; data_handle &rArr; data_point_handle &rArr; dp_download_handle &rArr; dp_download_mode_handle &rArr; enter_xiangxun_mode &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[11d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[48]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[11e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11f]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[47]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[125]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[126]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>AHT20_Read_CTdata_crc</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, sensor_dht20.o(i.AHT20_Read_CTdata_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AHT20_Read_CTdata_crc &rArr; AHT20_SendAC &rArr; AHT20_WR_Byte &rArr; SDA_Output &rArr; GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRC8
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_SendAC
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT20_update
</UL>

<P><STRONG><a name="[57]"></a>AHT20_Read_Status</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sensor_dht20.o(i.AHT20_Read_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AHT20_Read_Status &rArr; AHT20_WR_Byte &rArr; SDA_Output &rArr; GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_DHT20_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[55]"></a>AHT20_SendAC</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sensor_dht20.o(i.AHT20_SendAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AHT20_SendAC &rArr; AHT20_WR_Byte &rArr; SDA_Output &rArr; GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[5f]"></a>AHT20_Start_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sensor_dht20.o(i.AHT20_Start_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AHT20_Start_Init &rArr; JH_Reset_REG &rArr; AHT20_WR_Byte &rArr; SDA_Output &rArr; GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_DHT20_Init
</UL>

<P><STRONG><a name="[62]"></a>ALL_turn_off</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, device.o(i.ALL_turn_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ALL_turn_off &rArr; HEAT_turn
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIGHT_turn
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XX_turn
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEAT_turn
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLZ_turn
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UV_turn
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAN_turn
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CY_turn
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_chunjing_mode
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zidong_off
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunjing_off
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_xiangxun_mode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_shajun_mode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_zidong_mode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_jinhua_mode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_honggan_mode
</UL>

<P><STRONG><a name="[6a]"></a>AlarmTIMEreset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main_timer.o(i.AlarmTIMEreset))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
</UL>

<P><STRONG><a name="[6c]"></a>AlarmTIMEset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main_timer.o(i.AlarmTIMEset))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>Buzzer_Output</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, buzzer.o(i.Buzzer_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Buzzer_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>Buzzer_Start</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, buzzer.o(i.Buzzer_Start))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_chunjing_mode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_xiangxun_mode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_shajun_mode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_zidong_mode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_jinhua_mode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_honggan_mode
</UL>

<P><STRONG><a name="[67]"></a>CY_turn</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, device.o(i.CY_turn))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_turn_off
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinghua_on
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinghua_off
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>Calc_CRC8</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sensor_dht20.o(i.Calc_CRC8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Calc_CRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[6f]"></a>DHT20_I2C_Config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dht20_i2c.o(i.DHT20_I2C_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DHT20_I2C_Config &rArr; GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GPIOA_Enable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Out_PP
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_DHT20_Init
</UL>

<P><STRONG><a name="[a5]"></a>DHT20_get_humidity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sensor_dht20.o(i.DHT20_get_humidity))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_humidity
</UL>

<P><STRONG><a name="[a4]"></a>DHT20_get_temperature</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sensor_dht20.o(i.DHT20_get_temperature))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_temperature
</UL>

<P><STRONG><a name="[72]"></a>DHT20_update</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sensor_dht20.o(i.DHT20_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DHT20_update &rArr; AHT20_Read_CTdata_crc &rArr; AHT20_SendAC &rArr; AHT20_WR_Byte &rArr; SDA_Output &rArr; GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>Device_GPIO_Config</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, device_gpio.o(i.Device_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Device_GPIO_Config &rArr; GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GPIOB_Enable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GPIOA_Enable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Out_PP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_In_FLOATING
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[76]"></a>Device_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, device.o(i.Device_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Device_Init &rArr; Device_GPIO_Config &rArr; GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_GPIO_Config
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sytem_init
</UL>

<P><STRONG><a name="[65]"></a>FAN_turn</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, device.o(i.FAN_turn))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_turn_off
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinghua_on
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinghua_off
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;honggan_on
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;honggan_off
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[66]"></a>FLZ_turn</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, device.o(i.FLZ_turn))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_turn_off
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinghua_on
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinghua_off
</UL>

<P><STRONG><a name="[77]"></a>GPIO_AF_PP</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, config_103.o(i.GPIO_AF_PP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_AF_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_USART_Config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_USART_Config
</UL>

<P><STRONG><a name="[75]"></a>GPIO_In_FLOATING</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, config_103.o(i.GPIO_In_FLOATING))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_In_FLOATING &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_GPIO_Config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_USART_Config
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Input
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_USART_Config
</UL>

<P><STRONG><a name="[79]"></a>GPIO_In_PU</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, config_103.o(i.GPIO_In_PU))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_In_PU &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GPIO_Config
</UL>

<P><STRONG><a name="[78]"></a>GPIO_Init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Out_PP
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_In_PU
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_In_FLOATING
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AF_PP
</UL>

<P><STRONG><a name="[71]"></a>GPIO_Out_PP</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, config_103.o(i.GPIO_Out_PP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_GPIO_Config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_USART_Config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Output
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT20_I2C_Config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_USART_Config
</UL>

<P><STRONG><a name="[53]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GPIO_Get_Key
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
</UL>

<P><STRONG><a name="[4f]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_HW_Poweron
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_HW_Poweron
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
</UL>

<P><STRONG><a name="[52]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_HW_Poweron
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_HW_Poweron
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT20_I2C_Config
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
</UL>

<P><STRONG><a name="[6e]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_GPIO_Config
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XX_turn
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEAT_turn
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLZ_turn
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UV_turn
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Task
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAN_turn
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CY_turn
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Output
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[64]"></a>HEAT_turn</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, device.o(i.HEAT_turn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HEAT_turn
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_turn_off
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;honggan_on
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;honggan_off
</UL>

<P><STRONG><a name="[60]"></a>JH_Reset_REG</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, sensor_dht20.o(i.JH_Reset_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = JH_Reset_REG &rArr; AHT20_WR_Byte &rArr; SDA_Output &rArr; GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Start_Init
</UL>

<P><STRONG><a name="[7a]"></a>JW01_HW_Poweron</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, jw01_usart.o(i.JW01_HW_Poweron))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JW01_HW_Poweron
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>JW01_USART_Config</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, jw01_usart.o(i.JW01_USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = JW01_USART_Config &rArr; USART_Setup &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Setup
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GPIOC_Enable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GPIOA_Enable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Enable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Out_PP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_In_FLOATING
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AF_PP
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_JW01_Init
</UL>

<P><STRONG><a name="[81]"></a>JW01_USART_Enable_Rx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jw01_usart.o(i.JW01_USART_Enable_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JW01_USART_Enable_Rx &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>JW01_get_CH2O</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sensor_jw01.o(i.JW01_get_CH2O))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CH2O
</UL>

<P><STRONG><a name="[a8]"></a>JW01_get_CO2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sensor_jw01.o(i.JW01_get_CO2))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CO2
</UL>

<P><STRONG><a name="[a6]"></a>JW01_get_TVOC</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sensor_jw01.o(i.JW01_get_TVOC))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TVOC
</UL>

<P><STRONG><a name="[87]"></a>JW01_update</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sensor_jw01.o(i.JW01_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = JW01_update &rArr; JW01_start_sampling
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_start_sampling
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>Key_GPIO_Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, key_gpio.o(i.Key_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Key_GPIO_Config &rArr; GPIO_In_PU &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GPIOB_Enable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_In_PU
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
</UL>

<P><STRONG><a name="[89]"></a>Key_GPIO_Get_Key</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, key_gpio.o(i.Key_GPIO_Get_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Key_GPIO_Get_Key
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
</UL>

<P><STRONG><a name="[8a]"></a>Key_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, key.o(i.Key_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Key_Init &rArr; Key_GPIO_Config &rArr; GPIO_In_PU &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sytem_init
</UL>

<P><STRONG><a name="[8b]"></a>Key_Scan</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, key.o(i.Key_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Key_Scan &rArr; Key_GPIO_Get_Key
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GPIO_Get_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Task
</UL>

<P><STRONG><a name="[8c]"></a>Key_Task</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, key_task.o(i.Key_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Key_Task &rArr; enter_xiangxun_mode &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_wifi_mode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_xiangxun_mode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_shajun_mode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_zidong_mode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_jinhua_mode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_honggan_mode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>LIGHT_turn</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, device.o(i.LIGHT_turn))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_turn_off
</UL>

<P><STRONG><a name="[93]"></a>Mode_Task</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, mode_task.o(i.Mode_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Mode_Task &rArr; run_xiangxun_mode &rArr; enter_zidong_mode &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_zidong_mode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_xiangxun_mode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_shajun_mode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_jinghua_mode
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_honggan_mode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_chunjing_mode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_work_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>NVIC_Enable</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, config_103.o(i.NVIC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NVIC_Enable &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Main_Config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_BUZ_Config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_USART_Config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_USART_Config
</UL>

<P><STRONG><a name="[9c]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f10x_misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Enable
</UL>

<P><STRONG><a name="[9b]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Enable
</UL>

<P><STRONG><a name="[7c]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Main_Config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_BUZ_Config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_USART_Config
</UL>

<P><STRONG><a name="[9d]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GPIOC_Enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GPIOB_Enable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GPIOA_Enable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_USART_Config
</UL>

<P><STRONG><a name="[70]"></a>RCC_GPIOA_Enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, config_103.o(i.RCC_GPIOA_Enable))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_GPIO_Config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_USART_Config
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT20_I2C_Config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_USART_Config
</UL>

<P><STRONG><a name="[74]"></a>RCC_GPIOB_Enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, config_103.o(i.RCC_GPIOB_Enable))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_GPIO_Config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GPIO_Config
</UL>

<P><STRONG><a name="[7d]"></a>RCC_GPIOC_Enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, config_103.o(i.RCC_GPIOC_Enable))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_USART_Config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_USART_Config
</UL>

<P><STRONG><a name="[b9]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[50]"></a>SDA_Input</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dht20_i2c.o(i.SDA_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDA_Input &rArr; GPIO_In_FLOATING &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_In_FLOATING
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
</UL>

<P><STRONG><a name="[61]"></a>SDA_Output</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dht20_i2c.o(i.SDA_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDA_Output &rArr; GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Out_PP
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
</UL>

<P><STRONG><a name="[9e]"></a>Sensor_DHT20_Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, sensor_dht20.o(i.Sensor_DHT20_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Sensor_DHT20_Init &rArr; AHT20_Start_Init &rArr; JH_Reset_REG &rArr; AHT20_WR_Byte &rArr; SDA_Output &rArr; GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT20_I2C_Config
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Start_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sytem_init
</UL>

<P><STRONG><a name="[9f]"></a>Sensor_JW01_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sensor_jw01.o(i.Sensor_JW01_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Sensor_JW01_Init &rArr; JW01_USART_Config &rArr; USART_Setup &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_USART_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sytem_init
</UL>

<P><STRONG><a name="[d1]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[38]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main_timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 636 bytes, Stack size 32 bytes, main_timer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TIM4_IRQHandler &rArr; DHT20_update &rArr; AHT20_Read_CTdata_crc &rArr; AHT20_SendAC &rArr; AHT20_WR_Byte &rArr; SDA_Output &rArr; GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_work_type
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_work_mode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_zidong_mode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_jinhua_mode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_honggan_mode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UV_turn
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Task
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Task
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_update
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_get_TVOC
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_get_CO2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_get_CH2O
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAN_turn
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT20_update
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT20_get_temperature
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT20_get_humidity
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CY_turn
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Output
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmTIMEset
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmTIMEreset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmTIMEset
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmTIMEreset
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Main_Config
</UL>

<P><STRONG><a name="[a1]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>TIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Main_Config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_BUZ_Config
</UL>

<P><STRONG><a name="[ab]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Main_Config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_BUZ_Config
</UL>

<P><STRONG><a name="[aa]"></a>Timer_BUZ_Config</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, timer_main.o(i.Timer_BUZ_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Timer_BUZ_Config &rArr; NVIC_Enable &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sytem_init
</UL>

<P><STRONG><a name="[ad]"></a>Timer_Main_Config</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, timer_main.o(i.Timer_Main_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Timer_Main_Config &rArr; NVIC_Enable &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sytem_init
</UL>

<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tuya_wifi_usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBuf_RD
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBuf_Cnt
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_input
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sensor_jw01.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBuf_WD
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBuf_RD
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBuf_Cnt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>USART_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
</UL>

<P><STRONG><a name="[af]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
</UL>

<P><STRONG><a name="[7f]"></a>USART_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, config_103.o(i.USART_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_USART_Config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_USART_Config
</UL>

<P><STRONG><a name="[ae]"></a>USART_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>USART_ITConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_USART_Enable_Rx
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_USART_Enable_Rx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_USART_Put_Char
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>USART_Init</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Setup
</UL>

<P><STRONG><a name="[b0]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>USART_Setup</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, config_103.o(i.USART_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART_Setup &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_USART_Config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_USART_Config
</UL>

<P><STRONG><a name="[69]"></a>UV_turn</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, device.o(i.UV_turn))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_turn_off
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shajun_on
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shajun_off
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>WIFI_HW_Poweron</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wifi_usart.o(i.WIFI_HW_Poweron))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIFI_HW_Poweron
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>WIFI_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tuya_wifi_usart.o(i.WIFI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WIFI_Init &rArr; WIFI_USART_Config &rArr; USART_Setup &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_USART_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sytem_init
</UL>

<P><STRONG><a name="[bc]"></a>WIFI_USART_Config</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, wifi_usart.o(i.WIFI_USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WIFI_USART_Config &rArr; USART_Setup &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Setup
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GPIOC_Enable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GPIOA_Enable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Enable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Out_PP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_In_FLOATING
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AF_PP
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Init
</UL>

<P><STRONG><a name="[bd]"></a>WIFI_USART_Enable_Rx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wifi_usart.o(i.WIFI_USART_Enable_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WIFI_USART_Enable_Rx &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>WIFI_USART_Put_Char</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tuya_wifi_usart.o(i.WIFI_USART_Put_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBuf_WD
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmit_output
</UL>

<P><STRONG><a name="[68]"></a>XX_turn</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, device.o(i.XX_turn))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_turn_off
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xiangxun_on
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xiangxun_off
</UL>

<P><STRONG><a name="[4b]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[a3]"></a>all_data_update</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, protocol.o(i.all_data_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = all_data_update &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_work_mode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_temperature
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_humidity
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TVOC
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CO2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CH2O
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[ef]"></a>byte_to_int</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mcu_api.o(i.byte_to_int))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_value
</UL>

<P><STRONG><a name="[c8]"></a>data_handle</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, system.o(i.data_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = data_handle &rArr; data_point_handle &rArr; dp_download_handle &rArr; dp_download_mode_handle &rArr; enter_xiangxun_mode &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_beat_check
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mcu_wifi_mode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_point_handle
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
</UL>

<P><STRONG><a name="[d0]"></a>delay_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sytem_init
</UL>

<P><STRONG><a name="[56]"></a>delay_ms</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_HW_Poweron
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_DHT20_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_HW_Poweron
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[51]"></a>delay_us</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
</UL>

<P><STRONG><a name="[cf]"></a>dp_download_handle</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, protocol.o(i.dp_download_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dp_download_handle &rArr; dp_download_mode_handle &rArr; enter_xiangxun_mode &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_uv_handle
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_switch_handle
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_start_handle
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_pause_handle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_fragrance_handle
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_drying_handle
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_countdown_handle
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_auto_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_point_handle
</UL>

<P><STRONG><a name="[df]"></a>enter_chunjing_mode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mode.o(i.enter_chunjing_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enter_chunjing_mode &rArr; ALL_turn_off &rArr; HEAT_turn
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Start
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_turn_off
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_work_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
</UL>

<P><STRONG><a name="[90]"></a>enter_honggan_mode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mode.o(i.enter_honggan_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = enter_honggan_mode &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Start
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_turn_off
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_work_mode
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;honggan_on
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_work_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Task
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
</UL>

<P><STRONG><a name="[8d]"></a>enter_jinhua_mode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mode.o(i.enter_jinhua_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = enter_jinhua_mode &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Start
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_turn_off
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_work_mode
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinghua_on
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_work_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Task
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
</UL>

<P><STRONG><a name="[8f]"></a>enter_shajun_mode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mode.o(i.enter_shajun_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = enter_shajun_mode &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Start
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_turn_off
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shajun_on
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_work_mode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_work_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Task
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
</UL>

<P><STRONG><a name="[8e]"></a>enter_xiangxun_mode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mode.o(i.enter_xiangxun_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = enter_xiangxun_mode &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Start
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_turn_off
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xiangxun_on
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_work_mode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_work_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Task
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
</UL>

<P><STRONG><a name="[91]"></a>enter_zidong_mode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mode.o(i.enter_zidong_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = enter_zidong_mode &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Start
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_turn_off
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_work_type
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_work_mode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_work_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_xiangxun_mode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_shajun_mode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_jinghua_mode
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_honggan_mode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Task
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
</UL>

<P><STRONG><a name="[c5]"></a>get_CH2O</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sensor.o(i.get_CH2O))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_get_CH2O
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
</UL>

<P><STRONG><a name="[c6]"></a>get_CO2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sensor.o(i.get_CO2))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_get_CO2
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
</UL>

<P><STRONG><a name="[c4]"></a>get_TVOC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sensor.o(i.get_TVOC))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_get_TVOC
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
</UL>

<P><STRONG><a name="[f9]"></a>get_check_sum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system.o(i.get_check_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>

<P><STRONG><a name="[c3]"></a>get_current_humidity</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sensor.o(i.get_current_humidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_current_humidity
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT20_get_humidity
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
</UL>

<P><STRONG><a name="[c1]"></a>get_current_temperature</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sensor.o(i.get_current_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_current_temperature
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT20_get_temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
</UL>

<P><STRONG><a name="[e7]"></a>get_download_cmd_total</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocol.o(i.get_download_cmd_total))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dowmload_dpid_index
</UL>

<P><STRONG><a name="[94]"></a>get_work_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mode.o(i.get_work_mode))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_xiangxun_mode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_shajun_mode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_zidong_mode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_jinhua_mode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_honggan_mode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Task
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>get_work_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mode.o(i.get_work_type))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = main &rArr; wifi_uart_service &rArr; data_handle &rArr; data_point_handle &rArr; dp_download_handle &rArr; dp_download_mode_handle &rArr; enter_xiangxun_mode &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_protocol_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_USART_Enable_Rx
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_HW_Poweron
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_USART_Enable_Rx
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_HW_Poweron
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sytem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d4]"></a>mcu_dp_bool_update</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mcu_api.o(i.mcu_dp_bool_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mcu_dp_bool_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_uv_handle
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_switch_handle
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_start_handle
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_pause_handle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_fragrance_handle
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_drying_handle
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_auto_handle
</UL>

<P><STRONG><a name="[c0]"></a>mcu_dp_enum_update</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mcu_api.o(i.mcu_dp_enum_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_xiangxun_mode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_shajun_mode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_zidong_mode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_jinhua_mode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_honggan_mode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
</UL>

<P><STRONG><a name="[c2]"></a>mcu_dp_value_update</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, mcu_api.o(i.mcu_dp_value_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_countdown_handle
</UL>

<P><STRONG><a name="[d3]"></a>mcu_get_dp_download_bool</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcu_api.o(i.mcu_get_dp_download_bool))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_uv_handle
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_switch_handle
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_start_handle
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_pause_handle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_fragrance_handle
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_drying_handle
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_auto_handle
</UL>

<P><STRONG><a name="[de]"></a>mcu_get_dp_download_enum</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcu_api.o(i.mcu_get_dp_download_enum))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
</UL>

<P><STRONG><a name="[d6]"></a>mcu_get_dp_download_value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcu_api.o(i.mcu_get_dp_download_value))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_countdown_handle
</UL>

<P><STRONG><a name="[92]"></a>mcu_set_wifi_mode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mcu_api.o(i.mcu_set_wifi_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mcu_set_wifi_mode &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Task
</UL>

<P><STRONG><a name="[f5]"></a>my_memcpy</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, mcu_api.o(i.my_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_buffer
</UL>

<P><STRONG><a name="[f0]"></a>my_strlen</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mcu_api.o(i.my_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
</UL>

<P><STRONG><a name="[9a]"></a>run_chunjing_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mode.o(i.run_chunjing_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = run_chunjing_mode &rArr; chunjing_off &rArr; ALL_turn_off &rArr; HEAT_turn
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunjing_off
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Task
</UL>

<P><STRONG><a name="[98]"></a>run_honggan_mode</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, mode.o(i.run_honggan_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = run_honggan_mode &rArr; enter_zidong_mode &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;honggan_off
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_zidong_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Task
</UL>

<P><STRONG><a name="[95]"></a>run_jinghua_mode</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mode.o(i.run_jinghua_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = run_jinghua_mode &rArr; enter_zidong_mode &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinghua_on
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinghua_off
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_zidong_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Task
</UL>

<P><STRONG><a name="[97]"></a>run_shajun_mode</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mode.o(i.run_shajun_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = run_shajun_mode &rArr; enter_zidong_mode &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shajun_on
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shajun_off
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_zidong_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Task
</UL>

<P><STRONG><a name="[96]"></a>run_xiangxun_mode</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mode.o(i.run_xiangxun_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = run_xiangxun_mode &rArr; enter_zidong_mode &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xiangxun_on
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xiangxun_off
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_zidong_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Task
</UL>

<P><STRONG><a name="[99]"></a>run_zidong_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mode.o(i.run_zidong_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = run_zidong_mode &rArr; zidong_off &rArr; ALL_turn_off &rArr; HEAT_turn
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zidong_off
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Task
</UL>

<P><STRONG><a name="[f1]"></a>set_wifi_uart_buffer</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, system.o(i.set_wifi_uart_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = set_wifi_uart_buffer &rArr; my_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
</UL>

<P><STRONG><a name="[e8]"></a>set_wifi_uart_byte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system.o(i.set_wifi_uart_byte))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_wifi_mode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_beat_check
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>

<P><STRONG><a name="[e0]"></a>set_work_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mode.o(i.set_work_type))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_zidong_mode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
</UL>

<P><STRONG><a name="[eb]"></a>sytem_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.sytem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sytem_init &rArr; Sensor_DHT20_Init &rArr; AHT20_Start_Init &rArr; JH_Reset_REG &rArr; AHT20_WR_Byte &rArr; SDA_Output &rArr; GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Main_Config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_BUZ_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_JW01_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_DHT20_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>take_byte_rxbuff</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system.o(i.take_byte_rxbuff))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
</UL>

<P><STRONG><a name="[ed]"></a>uart_init</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>uart_receive_input</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mcu_api.o(i.uart_receive_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_receive_input
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>uart_transmit_output</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocol.o(i.uart_transmit_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_USART_Put_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_data
</UL>

<P><STRONG><a name="[ec]"></a>wifi_protocol_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mcu_api.o(i.wifi_protocol_init))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>wifi_uart_service</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, mcu_api.o(i.wifi_uart_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = wifi_uart_service &rArr; data_handle &rArr; data_point_handle &rArr; dp_download_handle &rArr; dp_download_mode_handle &rArr; enter_xiangxun_mode &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;with_data_rxbuff
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;take_byte_rxbuff
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_check_sum
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>wifi_uart_write_frame</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, system.o(i.wifi_uart_write_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_data
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_wifi_mode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_beat_check
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mcu_wifi_mode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>

<P><STRONG><a name="[f8]"></a>with_data_rxbuff</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system.o(i.with_data_rxbuff))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c7]"></a>chunjing_off</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mode.o(i.chunjing_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chunjing_off &rArr; ALL_turn_off &rArr; HEAT_turn
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_turn_off
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_chunjing_mode
</UL>

<P><STRONG><a name="[e9]"></a>honggan_off</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mode.o(i.honggan_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = honggan_off &rArr; HEAT_turn
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEAT_turn
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAN_turn
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_honggan_mode
</UL>

<P><STRONG><a name="[e3]"></a>honggan_on</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mode.o(i.honggan_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = honggan_on &rArr; HEAT_turn
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEAT_turn
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAN_turn
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_honggan_mode
</UL>

<P><STRONG><a name="[ea]"></a>jinghua_off</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mode.o(i.jinghua_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jinghua_off
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLZ_turn
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAN_turn
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CY_turn
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_jinghua_mode
</UL>

<P><STRONG><a name="[e4]"></a>jinghua_on</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mode.o(i.jinghua_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jinghua_on
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLZ_turn
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAN_turn
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CY_turn
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_jinghua_mode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_jinhua_mode
</UL>

<P><STRONG><a name="[e1]"></a>set_work_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mode.o(i.set_work_mode))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_chunjing_mode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_xiangxun_mode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_shajun_mode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_zidong_mode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_jinhua_mode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_honggan_mode
</UL>

<P><STRONG><a name="[f2]"></a>shajun_off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mode.o(i.shajun_off))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UV_turn
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_shajun_mode
</UL>

<P><STRONG><a name="[e5]"></a>shajun_on</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mode.o(i.shajun_on))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UV_turn
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_shajun_mode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_shajun_mode
</UL>

<P><STRONG><a name="[f3]"></a>xiangxun_off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mode.o(i.xiangxun_off))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XX_turn
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_xiangxun_mode
</UL>

<P><STRONG><a name="[e6]"></a>xiangxun_on</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mode.o(i.xiangxun_on))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XX_turn
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_xiangxun_mode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_xiangxun_mode
</UL>

<P><STRONG><a name="[f4]"></a>zidong_off</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mode.o(i.zidong_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = zidong_off &rArr; ALL_turn_off &rArr; HEAT_turn
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_turn_off
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_zidong_mode
</UL>

<P><STRONG><a name="[d2]"></a>dp_download_auto_handle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, protocol.o(i.dp_download_auto_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dp_download_auto_handle &rArr; mcu_dp_bool_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_bool
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[d5]"></a>dp_download_countdown_handle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, protocol.o(i.dp_download_countdown_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dp_download_countdown_handle &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_value
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[d7]"></a>dp_download_drying_handle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, protocol.o(i.dp_download_drying_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dp_download_drying_handle &rArr; mcu_dp_bool_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_bool
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[d8]"></a>dp_download_fragrance_handle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, protocol.o(i.dp_download_fragrance_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dp_download_fragrance_handle &rArr; mcu_dp_bool_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_bool
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[da]"></a>dp_download_mode_handle</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, protocol.o(i.dp_download_mode_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dp_download_mode_handle &rArr; enter_xiangxun_mode &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_work_type
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_chunjing_mode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_xiangxun_mode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_shajun_mode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_zidong_mode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_jinhua_mode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_honggan_mode
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmTIMEreset
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_enum
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[dd]"></a>dp_download_pause_handle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, protocol.o(i.dp_download_pause_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dp_download_pause_handle &rArr; mcu_dp_bool_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_bool
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[dc]"></a>dp_download_start_handle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, protocol.o(i.dp_download_start_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dp_download_start_handle &rArr; mcu_dp_bool_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_bool
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[d9]"></a>dp_download_switch_handle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, protocol.o(i.dp_download_switch_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dp_download_switch_handle &rArr; mcu_dp_bool_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_bool
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[db]"></a>dp_download_uv_handle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, protocol.o(i.dp_download_uv_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dp_download_uv_handle &rArr; mcu_dp_bool_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_bool
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[cd]"></a>data_point_handle</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, system.o(i.data_point_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = data_point_handle &rArr; dp_download_handle &rArr; dp_download_mode_handle &rArr; enter_xiangxun_mode &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dowmload_dpid_index
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[ce]"></a>get_dowmload_dpid_index</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, system.o(i.get_dowmload_dpid_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_dowmload_dpid_index
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_download_cmd_total
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_point_handle
</UL>

<P><STRONG><a name="[cb]"></a>get_mcu_wifi_mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, system.o(i.get_mcu_wifi_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_mcu_wifi_mode &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[c9]"></a>heat_beat_check</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, system.o(i.heat_beat_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = heat_beat_check &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[ca]"></a>product_info_update</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system.o(i.product_info_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = product_info_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_buffer
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[fa]"></a>wifi_uart_write_data</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, system.o(i.wifi_uart_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_uart_write_data &rArr; uart_transmit_output &rArr; WIFI_USART_Put_Char &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmit_output
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>

<P><STRONG><a name="[b2]"></a>UartBuf_Cnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tuya_wifi_usart.o(i.UartBuf_Cnt))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>UartBuf_RD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tuya_wifi_usart.o(i.UartBuf_RD))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>UartBuf_WD</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tuya_wifi_usart.o(i.UartBuf_WD))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_USART_Put_Char
</UL>

<P><STRONG><a name="[4e]"></a>AHT20_RD_Byte</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sensor_dht20.o(i.AHT20_RD_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AHT20_RD_Byte &rArr; SDA_Input &rArr; GPIO_In_FLOATING &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Input
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[59]"></a>AHT20_WR_Byte</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sensor_dht20.o(i.AHT20_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AHT20_WR_Byte &rArr; SDA_Output &rArr; GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Output
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Input
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_DHT20_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_SendAC
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[58]"></a>I2C_Start</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sensor_dht20.o(i.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Start &rArr; SDA_Output &rArr; GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Output
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_DHT20_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_SendAC
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[5d]"></a>I2C_Stop</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sensor_dht20.o(i.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Stop &rArr; SDA_Output &rArr; GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Output
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_DHT20_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_SendAC
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[5a]"></a>Receive_ACK</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sensor_dht20.o(i.Receive_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Receive_ACK &rArr; SDA_Input &rArr; GPIO_In_FLOATING &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Input
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_DHT20_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_SendAC
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[5b]"></a>Send_ACK</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sensor_dht20.o(i.Send_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Send_ACK &rArr; SDA_Output &rArr; GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Output
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Input
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[5c]"></a>Send_NOT_ACK</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, sensor_dht20.o(i.Send_NOT_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Send_NOT_ACK &rArr; SDA_Output &rArr; GPIO_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Output
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[83]"></a>JW01_read_byte</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sensor_jw01.o(i.JW01_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JW01_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBuf_RD
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBuf_Cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_update
</UL>

<P><STRONG><a name="[86]"></a>JW01_start_sampling</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sensor_jw01.o(i.JW01_start_sampling))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JW01_start_sampling
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBuf_RD
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBuf_Cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_update
</UL>

<P><STRONG><a name="[84]"></a>UartBuf_Cnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sensor_jw01.o(i.UartBuf_Cnt))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_start_sampling
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_read_byte
</UL>

<P><STRONG><a name="[85]"></a>UartBuf_RD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sensor_jw01.o(i.UartBuf_RD))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_start_sampling
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JW01_read_byte
</UL>

<P><STRONG><a name="[b5]"></a>UartBuf_WD</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sensor_jw01.o(i.UartBuf_WD))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>SetSysClock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
